import datetime
from typing import Any, Callable, Generator

def NO_COMPRESSION_32(uncompressed_size, crc_32): ...
def NO_COMPRESSION_64(uncompressed_size, crc_32): ...
def ZIP_32(offset, default_get_compressobj): ...
def ZIP_64(offset, default_get_compressobj): ...
def ZIP_AUTO(uncompressed_size, level: int = ...): ...
def stream_zip(
    files: (
        Generator[
            tuple[str, datetime.datetime, int, Callable, Generator[bytes, Any, None]],
            Any,
            None,
        ]
        | tuple[str, datetime.datetime, int, Callable, Generator[bytes, Any, None]]
        | tuple[str, datetime.datetime, int, Callable, bytes]
    ),
    chunk_size: int = ...,
    get_compressobj=...,
    extended_timestamps: bool = ...,
): ...

class ZipError(Exception): ...
class ZipValueError(ZipError, ValueError): ...
class ZipIntegrityError(ZipValueError): ...
class CRC32IntegrityError(ZipIntegrityError): ...
class UncompressedSizeIntegrityError(ZipIntegrityError): ...
class ZipOverflowError(ZipValueError, OverflowError): ...
class UncompressedSizeOverflowError(ZipOverflowError): ...
class CompressedSizeOverflowError(ZipOverflowError): ...
class CentralDirectorySizeOverflowError(ZipOverflowError): ...
class OffsetOverflowError(ZipOverflowError): ...
class CentralDirectoryNumberOfEntriesOverflowError(ZipOverflowError): ...
class NameLengthOverflowError(ZipOverflowError): ...
